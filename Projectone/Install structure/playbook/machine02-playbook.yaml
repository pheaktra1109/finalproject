---
- name: Install Oh My Zsh and Portainer on Machine02
  hosts: machine02
  become: true
  tasks:
    # 1. Install prerequisites for Oh My Zsh
    - name: Install Zsh
      apt:
        name: zsh
        state: present
        update_cache: yes

    - name: Change default shell to Zsh
      shell: chsh -s $(which zsh) "{{ ansible_user }}"
      args:
        executable: /bin/bash
      notify:
        - Restart Zsh
    - name: Install Oh My Zsh
      shell: |
        RUNZSH=no sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
      environment:
        ZSH: "/home/{{ ansible_user }}/.oh-my-zsh"
      args:
        creates: "/home/{{ ansible_user }}/.oh-my-zsh"
      register: result
      changed_when: result.rc == 0
    - name: Install Nginx
      apt:
        name: nginx
        state: present
    - name: Start and enable Nginx
      service:
        name: nginx
        state: started
        enabled: true
    # 3. Install Docker
    - name: Install Docker and dependencies
      apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - software-properties-common
        state: present

    - name: Add Docker GPG key
      shell: curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -

    - name: Add Docker repository
      shell: add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"

    - name: Install Docker
      apt:
        name: docker-ce
        state: present

    - name: Add user to Docker group
      user:
        name: "{{ ansible_user }}"
        groups: docker
        append: true

    # 4. Install Portainer
    - name: Deploy Portainer container
      docker_container:
        name: portainer
        image: portainer/portainer-ce:latest
        state: started
        ports:
          - "8000:9000"
        volumes:
          - /var/run/docker.sock:/var/run/docker.sock
          - portainer_data:/data
    # Set up SonarQube directories
    - name: Create SonarQube directory
      file:
        path: /opt/sonarqube
        state: directory
        owner: tra
        group: tra
        mode: 0755

    # Write the Docker Compose file
    - name: Create Docker Compose file for SonarQube
      copy:
        dest: /opt/sonarqube/docker-compose.yml
        content: |
          version: '3.8'
          services:
            sonarqube:
              image: sonarqube:latest
              ports:
                - "9000:9000"
              environment:
                - SONARQUBE_JDBC_URL=jdbc:postgresql://sonar-postgresql:5432/sonar
                - SONARQUBE_JDBC_USERNAME=sonar
                - SONARQUBE_JDBC_PASSWORD=sonar@2023
              restart: always
              depends_on:
                - sonar-postgresql
              volumes:
                - sonarqube_conf:/opt/sonarqube/conf
                - sonarqube_data:/opt/sonarqube/data
                - sonarqube_extensions:/opt/sonarqube/extensions
                - sonarqube_bundled-plugins:/opt/sonarqube/lib/bundled-plugins
            sonar-postgresql:
              image: postgres:latest
              environment:
                - POSTGRES_USER=sonar
                - POSTGRES_PASSWORD=sonar@2023
              restart: always
              volumes:
                - postgresql_data:/var/lib/postgresql
          volumes:
            sonarqube_conf:
            sonarqube_data:
            sonarqube_extensions:
            sonarqube_bundled-plugins:
            postgresql_data:
        owner: tra
        group: tra
        mode: '0644'

    # Start SonarQube and PostgreSQL
    - name: Deploy SonarQube with Docker Compose
      command: docker compose -f /opt/sonarqube/docker-compose.yml up -d
      args:
        chdir: /opt/sonarqube
    - name: Wait for SonarQube to be ready
      uri:
        url: http://localhost:9000
        status_code: 200
      retries: 10
      delay: 30
      register: result
      until: result is success
    #add domain name
    - name: Create Nginx configuration for SonarQube
      blockinfile:
        path: /etc/nginx/sites-available/sonarqube
        create: true
        block: |
          server {
              listen 80;
              server_name sonarqube.sopheaktra.store;

              location / {
                  proxy_pass http://192.81.214.130:9000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }
          }

    - name: Enable Nginx site configuration
      file:
        src: /etc/nginx/sites-available/sonarqube
        dest: /etc/nginx/sites-enabled/sonarqube
        state: link
    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded

    - name: Remove default Nginx configuration
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent

    - name: Restart Nginx
      service:
        name: nginx
        state: restarted

    # 6. Obtain and apply SSL certificates
    - name: Install Certbot
      apt:
        name: certbot
        state: present

    - name: Install Nginx plugin for Certbot
      apt:
        name: python3-certbot-nginx
        state: present

    - name: Obtain SSL certificate for sonarqube
      command: >
        certbot --nginx -d sonarqube.sopheaktra.store
        --non-interactive --agree-tos -m voysopheaktra1109@gmail.com
      register: certbot_output


    - name: Restart Nginx to apply SSL
      service:
        name: nginx
        state: restarted
    

  handlers:
    - name: Restart Zsh
      shell: exec zsh
      become: true
